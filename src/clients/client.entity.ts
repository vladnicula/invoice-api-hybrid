import { Field, Float, HideField, ID, Int, ObjectType } from '@nestjs/graphql';
import { Entity, Column, PrimaryGeneratedColumn, ManyToOne, OneToMany } from 'typeorm';

import { UserEntity } from 'src/users/user.entity';
import { InvoiceEntity } from 'src/invoices/invoice.entity';


@ObjectType()
export class ClientListInfo {
  @Field(type => Int)
  total: number;
  @Field(type => Int)
  skip: number;
  @Field(type => Int)
  limit: number;
  results: ClientEntity[]
}

@ObjectType()
@Entity()
export class ClientEntity {
  @Field(type => ID)
  @PrimaryGeneratedColumn("uuid")
  id: string;

  @Column()
  name: string;

  @Column()
  contactName: string;

  @Column()
  contactEmail: string;

  @Column()
  taxCode: string;

  @Column()
  iban: string;

  @Column()
  address: string;

  @ManyToOne((type) => UserEntity, user => user.clients, {
    onDelete: "CASCADE"
  })
  user: UserEntity;

  @Column()
  userId: string;

  @HideField()
  @OneToMany((type) => InvoiceEntity, invocie => invocie.client)
  invoices: InvoiceEntity[];

  // generated by service layer, not existing in the db
  @Field(type => Float)
  totalBilled: number;
  @Field(type => Int)
  invoiceCount: number;
}
